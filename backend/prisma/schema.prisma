// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Patient {
  id           String        @id @default(uuid()) @db.VarChar(36)
  name         String        @db.VarChar(100)
  cpf          String        @unique @db.VarChar(14) // duas pessoas podem ter o mesmo nome, entao o CPF ajuda a identificar unicamente cada paciente
  appointments Appointment[]
  createdAt    DateTime      @default(now())

  @@map("patients")
}

model Doctor {
  id           String        @id @default(uuid()) @db.VarChar(36)
  name         String        @db.VarChar(100)
  specialty    String        @db.VarChar(100)
  appointments Appointment[]
  createdAt    DateTime      @default(now())

  @@map("doctors")
}

enum AppointmentStatus {
  Agendado
  Cancelado
  Realizado
}

model Appointment {
  id        String            @id @default(uuid()) @db.VarChar(36)
  date      DateTime
  patientId String            @db.VarChar(36)
  doctorId  String            @db.VarChar(36)
  patient   Patient           @relation(fields: [patientId], references: [id])
  doctor    Doctor            @relation(fields: [doctorId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    AppointmentStatus @default(Agendado)

  @@unique([doctorId, date], name: "unique_doctor_date")
  @@map("appointments")
}

model Specialty {
  id   String @id @default(uuid()) @db.VarChar(36)
  name String @unique @db.VarChar(100)

  @@map("specialties")
}
